/*
 * Copyright Â© 2018 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
    execIn,
    gatherFromMatches,
    isLocalProject,
    LocalProject,
    Project,
} from "@atomist/automation-client";
import {
    CodeInspection,
    ProjectFile,
} from "@atomist/sdm";
import * as _ from "lodash";
import {
    XmldocFileParser,
    XmldocTreeNode,
} from "../../xml/XmldocFileParser";
import { extractVersionedArtifact } from "../parse/fromPom";
import {
    coordinates,
    VersionedArtifact,
} from "../VersionedArtifact";

/**
 * Dependencies of a project
 */
export interface Dependencies {
    dependencies: VersionedArtifact[];
}

/**
 * Find dependencies from the effective pom
 * @param {Project} p
 * @return {Promise<VersionedArtifact[]>}
 */
export async function findDependenciesFromEffectivePom(p: Project): Promise<VersionedArtifact[]> {
    if (!isLocalProject(p)) {
        throw new Error(`Fingerprinting only works on local projects: had ${p.id.url}`);
    }
    const f = await extractEffectivePom(p);
    return gatherFromMatches(p, new XmldocFileParser(),
        f.path,
        "//dependencies/dependency",
        m => {
            return extractVersionedArtifact(m as any as XmldocTreeNode);
        });
}

/**
 * Find dependencies from the effective POM
 */
export const FindDependencies: CodeInspection<Dependencies> = async p => {
    return { dependencies: await findDependenciesFromEffectivePom(p) };
};

export const FindDependenciesOfGroup: CodeInspection<Dependencies, { group: string }> = async (p, i) => {
    const deps = await FindDependencies(p, i);
    return {
        dependencies: deps.dependencies
            .filter(d => d.group === i.parameters.group),
    };
};

/**
 * Return unique dependencies found across all of these projects
 * @param {Dependencies[]} deps
 * @return {Dependencies}
 */
export function uniqueDependencies(deps: Dependencies[]): Dependencies {
    return {
        dependencies: _.uniqBy(
            _.flatten(deps.map(d => d.dependencies)),
            d => coordinates(d)),
    };
}

const XmlFile = "effective-pom.xml";

/**
 * Parse the effective POM generated by mvn help:effective-pom and return
 * the raw XML.
 * Also leave the effective POM in the project
 * @param {LocalProject} p
 * @return {Promise<any>}
 */
async function extractEffectivePom(p: LocalProject): Promise<ProjectFile> {
    try {
        await execIn(p.baseDir, `mvn`, [`help:effective-pom`, `-Doutput=${XmlFile}`]);
        return p.findFile(XmlFile);
    } catch (err) {
        throw err;
    }
}
